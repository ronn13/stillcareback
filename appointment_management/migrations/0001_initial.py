# Generated by Django 5.2.4 on 2025-07-19 18:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('client_management', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(help_text='When the appointment/visit should start')),
                ('end_time', models.DateTimeField(help_text='When the appointment/visit should end')),
                ('frequency', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], help_text='How often this appointment repeats', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('checklist_items', models.JSONField(default=list, help_text="List of checklist items from the client's care plan")),
                ('assigned_staff', models.ForeignKey(help_text='Staff member assigned to this appointment', on_delete=django.db.models.deletion.PROTECT, related_name='appointments', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(help_text='The client this appointment is for', on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='client_management.client')),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
            },
        ),
        migrations.CreateModel(
            name='BodyMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateTimeField(auto_now_add=True, help_text='Date and time when the body map was recorded')),
                ('body_regions', models.JSONField(default=dict, help_text='Body regions with injury markings (front/back views)')),
                ('injuries', models.JSONField(default=list, help_text='Detailed injury records with location, size, type, color, etc.')),
                ('consent_given', models.BooleanField(default=False, help_text='Was consent given for the body map examination?')),
                ('consent_type', models.CharField(blank=True, choices=[('verbal', 'Verbal Consent'), ('written', 'Written Consent'), ('implied', 'Implied Consent'), ('emergency', 'Emergency Treatment'), ('guardian', 'Guardian Consent'), ('none', 'No Consent Given')], help_text='Type of consent obtained', max_length=20, null=True)),
                ('consent_notes', models.TextField(blank=True, help_text='Notes about consent process', null=True)),
                ('photography_consent', models.BooleanField(default=False, help_text='Was consent given for photography?')),
                ('photos_taken', models.BooleanField(default=False, help_text='Were photographs taken?')),
                ('photo_documentation', models.TextField(blank=True, help_text='Details of photographs taken', null=True)),
                ('medical_referral', models.BooleanField(default=False, help_text='Was a medical referral made?')),
                ('medical_referral_details', models.TextField(blank=True, help_text='Details of medical referral', null=True)),
                ('police_notified', models.BooleanField(default=False, help_text='Were the police notified?')),
                ('police_notification_details', models.TextField(blank=True, help_text='Details of police notification', null=True)),
                ('safeguarding_referral', models.BooleanField(default=False, help_text='Was a safeguarding referral made?')),
                ('safeguarding_referral_details', models.TextField(blank=True, help_text='Details of safeguarding referral', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the body map examination', null=True)),
                ('follow_up_required', models.BooleanField(default=False, help_text='Is follow-up required?')),
                ('follow_up_details', models.TextField(blank=True, help_text='Details of required follow-up', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(help_text='The appointment during which this body map was recorded', on_delete=django.db.models.deletion.CASCADE, related_name='body_maps', to='appointment_management.appointment')),
                ('practitioner', models.ForeignKey(help_text='Healthcare practitioner who recorded the body map', on_delete=django.db.models.deletion.PROTECT, related_name='body_maps_recorded', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Body Map',
                'verbose_name_plural': 'Body Maps',
                'ordering': ['-date_recorded'],
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(help_text='When the incident occurred')),
                ('persons_involved', models.TextField(help_text='Names and roles of persons involved in the incident')),
                ('addresses_of_persons_involved', models.TextField(help_text='Addresses of persons involved')),
                ('incident_details', models.TextField(help_text='Detailed description of what happened')),
                ('was_person_injured', models.BooleanField(default=False, help_text='Was anyone injured in this incident?')),
                ('injury_details', models.TextField(blank=True, help_text='Details of injuries sustained', null=True)),
                ('person_injured', models.CharField(blank=True, choices=[('service_user', 'Service User'), ('carer', 'Carer'), ('visitor', 'Visitor'), ('other', 'Other')], help_text='Who was injured (if applicable)', max_length=20, null=True)),
                ('incident_classification', models.JSONField(default=list, help_text='Classification of the incident (multiple selections allowed)')),
                ('remediation_taken', models.TextField(help_text='Actions taken to address the incident')),
                ('incident_notifiable_riddor', models.BooleanField(default=False, help_text='Is this incident notifiable under RIDDOR 1995?')),
                ('f2508_document', models.FileField(blank=True, help_text='F2508 document (required if RIDDOR notifiable)', null=True, upload_to='incidents/f2508_documents/')),
                ('other_people_notified', models.CharField(blank=True, help_text='Other people/organizations notified about this incident', max_length=500, null=True)),
                ('additional_information', models.TextField(blank=True, help_text='Any additional information about the incident', null=True)),
                ('insurers_advised', models.BooleanField(default=False, help_text='Have insurers been advised of this incident?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(help_text='The appointment during which this incident occurred', on_delete=django.db.models.deletion.CASCADE, related_name='incidents', to='appointment_management.appointment')),
            ],
            options={
                'verbose_name': 'Incident',
                'verbose_name_plural': 'Incidents',
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the medication', max_length=200)),
                ('strength', models.DecimalField(decimal_places=2, help_text='Strength of the medication in mg', max_digits=10)),
                ('dose', models.DecimalField(decimal_places=2, help_text='Dose to be administered in mg', max_digits=10)),
                ('frequency', models.CharField(choices=[('once_daily', 'Once Daily'), ('twice_daily', 'Twice Daily'), ('three_times_daily', 'Three Times Daily'), ('four_times_daily', 'Four Times Daily'), ('every_4_hours', 'Every 4 Hours'), ('every_6_hours', 'Every 6 Hours'), ('every_8_hours', 'Every 8 Hours'), ('every_12_hours', 'Every 12 Hours'), ('as_needed', 'As Needed (PRN)'), ('before_meals', 'Before Meals'), ('after_meals', 'After Meals'), ('with_meals', 'With Meals'), ('at_bedtime', 'At Bedtime'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('other', 'Other')], help_text='How often the medication should be administered', max_length=20)),
                ('administration_times', models.JSONField(default=list, help_text='Specific times when medication should be administered (multiple selections allowed)')),
                ('route', models.CharField(choices=[('oral', 'Oral'), ('buccal', 'Buccal'), ('sublingual', 'Sublingual'), ('intravenous', 'Intravenous (IV)'), ('intramuscular', 'Intramuscular (IM)'), ('subcutaneous', 'Subcutaneous (SC)'), ('topical', 'Topical'), ('inhalation', 'Inhalation'), ('nasal', 'Nasal'), ('ophthalmic', 'Ophthalmic (Eye)'), ('otic', 'Otic (Ear)'), ('rectal', 'Rectal'), ('transdermal', 'Transdermal'), ('other', 'Other')], help_text='Route of administration', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the medication administration', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(help_text='The appointment during which this medication is administered', on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='appointment_management.appointment')),
            ],
            options={
                'verbose_name': 'Medication',
                'verbose_name_plural': 'Medications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Seizure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(help_text='When the seizure started')),
                ('end_time', models.DateTimeField(blank=True, help_text='When the seizure ended', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(help_text='The appointment during which this seizure occurred', on_delete=django.db.models.deletion.CASCADE, related_name='seizures', to='appointment_management.appointment')),
            ],
            options={
                'verbose_name': 'Seizure',
                'verbose_name_plural': 'Seizures',
                'ordering': ['-start_time'],
            },
        ),
    ]
